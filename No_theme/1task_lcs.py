def longest_common_subsequence(str1, str2):
    m = len(str1)
    n = len(str2)

    # Create a table to store lengths of LCS
    lcs_table = [[0] * (n + 1) for _ in range(m + 1)]

    # Building the LCS table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1
            else:
                lcs_table[i][j] = max(lcs_table[i - 1][j], lcs_table[i][j - 1])

    # Retrieve the LCS
    lcs = ""
    i = m
    j = n
    while i > 0 and j > 0:
        if str1[i - 1] == str2[j - 1]:
            lcs = str1[i - 1] + lcs
            i -= 1
            j -= 1
        elif lcs_table[i - 1][j] > lcs_table[i][j - 1]:
            i -= 1
        else:
            j -= 1

    return lcs


string1 = "TTTTAACTTTAAGTATGACAACATTACCATAAGTTCTGTAGTGTACGACGGTCACGTCAACGTAACAGGATTGAAACTATATCCCGTGCGTCCTTGTGATCCCGATCGGAGAGGCTTAAATGGCAAAACATGTAAACTGCTGACATAGCTCGCGGACCTTATAGTCTAAGGCCAGCGAGCAGGTGCTAGTCAGCCAGTTACGCTTAAAGCTTTGCTCGACAAAGCAGGATGAGACCACAGAAGGACTATCGTACCTCTAGTAACGGCAGTGGCCTGAGTACACCTCGATCTCCATTCGATTGACCCACTCTGATATCCGAATAATACCGATGAATCTGGGGTCTCTTTCGACACCCAATTTGGCGCTAACGACGTCAGGATAGTCCCACTCGAGTGTATTAGGGCGAATTCGATACGCGCCGAAGTCATCTATCGAATAGTATCTGCTATGAGCCGGAAAGACTCATACCACTCCGGTTCTGCTGTATACATGGCTTTTTGCTGAAGCGCACATCTCTAGCACGAATGCGATATGCGGTCGCAAAGTGTCTTGGATGTGGGTCATAACAGAAATGAGCAACCATGTTGCCAGCTCGGTCTGGGGAACGTTTAAGTACTGGTCGCTTGATGCGGAGCTCGTTCCGCACTAGCTGCCCTCTCCGCCCTAGTACATGGAGGCGAGGATGCCGGTTTTTCCTGGACCCCGCCGTATGAATACCGCGACGTAAGTATTAGGTGGTGACCTAAGTCGCGGCATTTGCGGGGCCTGGTATCGCCTAGTTCCTAGTTAACCCATTTTATTTGACTCTGTTATTAACGAGATGCCGGGTGTCTCGCGGTTGATCCTTCACCAACCGTGGATCGGGTCCTAGTACCGATTCAGAAACGCCCAGCCGTCGTGAACGCCCCCGTGCGACCCCAATTCTGAATCAC"
string2 = "AGCAGGGCAAATAACTACGAAGTTTTATTACCGGACCTAAATTAACAGACGTAAACGCTGCTCCATTCTATATCTATCGATGATAAGGAAGTCTCCATACGTTTTTCTTCCAGGCGGTTATAAGATTCGCATTGTTTCTTGTGCCCGACCGGTGTGAGAACTAGCACTGACTGCTCCAGAAACTCTAGAGGTCTTGTACCTAAAAGTCGCTGCCGCGCACGCCGGTAGTACAGGCTCTTAGTTTCGAGGAACCCGAACTGTGCAACCGATCCCACCGACCCCAGTGTTCATGCCGCTCTGATACACACAGACCATGAACGAAGGCTCTAGCCATTAACCATTATTTTCAACGGCTGAGCAGTATATGGCACTGGGCGCGGCTTGACGAGCACAGGTGCTGAGGCTCATGATACGAATACCTACGGTAGACGGGCAAACTCTTGTCAAAAACTTGAGATCCCCAACAGAACGCTCAGTGAGTGGTTGTGGTTTGAGATCTATTCTCGAAGTTGGAAAGGACGCACGTCATGTACTGTTCAACTTGGTAGCACTCCGGTCAGCTCACAAGTGACTGCGCGCAGTCCTCTGACCCCACTTGGTCCCCTAAGCGCCACGTTGCTGAAATGCGTGATTTGCCGGGGCATTTTGGCTGTGAAAGGACACCCCGGCTAAAGTTATGAGCGACACGATTTCAGAAGAGTTGTCTAATAAACGAGACTAGTTATTCATCAAGTTCCGTTTTCCTACATTACTGTGGGCTCCGCGGTATCAGCGGTAAGTGGCTCGTAATCTCGCGGGAGATCGCTTTCTTAAAATAATCTTAAGAGTCTAGCGCGGTGGACTTCTTAGCCCTGGACGGCTATTATTTAGACACACGCGTAGAGATCTGCTTGTGCCCCTATGCAGTACACGGTTTGCTTACTTCAATTGTGTGGAGGTACTTTGTCCAGCCCTGACAGTAA"
result = longest_common_subsequence(string1, string2)
print(result)
