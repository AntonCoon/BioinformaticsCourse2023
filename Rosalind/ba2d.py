def Profile(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    profile = [[0 for i in range(k)] for j in range(4)]
    for i in range(t):
        for j in range(k):
            if Motifs[i][j] == 'A':
                profile[0][j] += 1
            elif Motifs[i][j] == 'C':
                profile[1][j] += 1
            elif Motifs[i][j] == 'G':
                profile[2][j] += 1
            elif Motifs[i][j] == 'T':
                profile[3][j] += 1
    for i in range(4):
        for j in range(k):
            profile[i][j] = profile[i][j] / t
    return profile


def ProfileMostProbablePattern(Text, k, Profile):
    n = len(Text)
    maxprob = -1
    for i in range(n - k + 1):
        prob = 1
        Pattern = Text[i:i + k]
        for j in range(k):
            if Pattern[j] == 'A':
                prob *= Profile[0][j]
            elif Pattern[j] == 'C':
                prob *= Profile[1][j]
            elif Pattern[j] == 'G':
                prob *= Profile[2][j]
            elif Pattern[j] == 'T':
                prob *= Profile[3][j]
        if prob > maxprob:
            maxprob = prob
            MostProbablePattern = Pattern
    return MostProbablePattern


def Score(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    score = 0
    for j in range(k):
        count = [0, 0, 0, 0]
        for i in range(t):
            if Motifs[i][j] == 'A':
                count[0] += 1
            elif Motifs[i][j] == 'C':
                count[1] += 1
            elif Motifs[i][j] == 'G':
                count[2] += 1
            elif Motifs[i][j] == 'T':
                count[3] += 1
        score += t - max(count)
    return score


def GreedyMotifSearch(Dna, k, t):
    BestMotifs = []
    for i in range(0, len(Dna[0]) - k + 1):
        BestMotifs.append(Dna[0][i:i + k])
    n = len(Dna[0])
    for i in range(n - k + 1):
        Motifs = []
        Motifs.append(Dna[0][i:i + k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs


Dna = ["CGCTTCAGTCAATGGGACCATTTTACAATACAACCACCCGTCATTATTTATAAATGCGCGGATTCTTCAGCTTGGAGGGACCCCAACTGGTGATATGTTAATAGATACGGTCTTCAACGCAATATTATCCCGAAGTAGACAGTGACCATGGAATGC",
"GACGCCTCCATCAGGGACCATTATTTCGCACATGATGAATTGCGCAAGGTAGGCCGGCACAGTCACTAGACCGCGAATAATTAGAAAACGAGGGGCATTCTCCCTAGGCGTGGCATGCGGAAGAGGGGTTGGCCGTCGCATGTTTAGCTACGTCTT",
"TGGGCACATTTTCACGGCCCAATACGCCAATATCCGTACGCGTGACATGCGCTCTATGTGGTGCGCGGGTATCGGAGTCTCTGCACATTTGACCCTGTCGAGGAATTGATTCGCCCAGGAGACTTATCGACCAGGCCATCTGAATAGAATCCAAAT",
"GGGGCTCATTTTTTGGCACCGTGCTTCGACGGTAGGGCACACGCTACCCGCTGTTGGCAGGCCCGGTATATGGACAGAGGGAATCAGGGCTTCTCGATCAGCGGTCAACAAGCATCGCGTTGCTTCTTACGATTTCATGCAGTACTAACCCACTGC",
"GTGATTCCGCCCACAATTCTGACAGGGGGACATTATCCCTTTGATCTTGGACCATACATCTGTGTGACTGGTTAGAGGAAGTGGACGTCGTTTCGGCTGGTTTATATCCTAAATCTATTGCGACAGTGGGAAGTAACGCGATACGACGATAGGGCG",
"TCTGAACTTCCAAAGCCACCACTTCGCCTGCCCCGCTATAGTCGTTAACGAGGTCCAAGCATCACGTCTAAGCGGGGACATTATGAGTTTACATTTAACGCTCAGCCCTGGCTTCGAAAGCTACCCCTTATAAGCCAAGTAACTTCGTAGTGTCTA",
"CAAGTGATCACGCACGTCCAAGACGTAGTCGGATGGCAGAGCGTATCAGTGCCGAGAGAGCTTAATCACGCAGACGCTCGGCTAGGACGCGCGCAACAACCGCCATATGACAATTAGTAGTGTTGCAAATGGCGGGGGCATTTTTATGAATATTCC",
"AACGGGATTGTTTTTCCTTGGTCTCTCCCATGCTGGTTACACTCGGCGACGTAAAATGACACTACACAAGGGAAAAAATCCTTATGTCCCTTCGGAAAGTCGAAGAATAGGGTCCATTCTCCAATATCCTATTCTGTCCTTCTACTTGCGGGGGGG",
"CTTACCAGGAGAGGTGAACCTTTTGACTCCGCTTTTCGGACCGTCAAGGGACACGCTGGAAACACACCTGCTAGGGAACATTCTGTCGAGTCAAGTAGGTAAATGATCCAAGATGGAACCATGCGGGCTTAAATACAACAAACACAACGCAAACAG",
"GCCAGGCACCGTGTAGTTCAACAAGATACAGAAACAGGCCATTCTTGGAGGTGATAGGAAGGGGGACATTTTCTAAATCCTTCGAAAGCGGGGGCCTTCTCAATACACAGGTTCACGAACATACCCCCGCACAGGCGAGTGACTGATAACCGATCT",
"GCATCAATTCGACGCGCATTGGCCAGGGCTCGGTTTTACTCAGGAGTTAGCCAAGGGGCTATAGAGCGCCCTCTGATATTTTGAAGGGTGACAATGAAACCCGCAAGGCAGTGCCATCCTGGTAGGATAACTGCAGGCGGACGGAGGGTCCATTGT",
"TCCTCTAAGTAAATAAATAAGGGGGGGGGTCATTCTTGCAAAGCCAGTAGGCGACGGGGAAGGCTCTCGAAAGACTTTCGAAAGATTCATCAACTGGCAGATAGAAGATCGTCAACACACGGCCACACCATACGCAGGGTGACTCTTCTTTAAAAA",
"TTGAGAGCCTGCGCATACTAGAATCGGGCGCATTCTGAGGGACTGACCCACCATGATACATGCTCCCCCGGATGGCTGTAGCTGTCACCGTGATGGCCGTTGGTAAGCGATGTACTTGCGCATATGGGGATGTCTAACAACTAGTAAGCAGGCTCA",
"TGGGTGCATTATGTTTGTATGCCACATGACCTAAGCATGGTAATTTTCAGAATCGGGGGAGGCACTTTGATCACAACGCTCCGTGGACGGTTGTCTGACCGCCCTGAGCAAGTGGAGGTGATATTGTCCGGTGCTCTGTCCCTACAGTCGCAGTGA",
"CACTCGGCAGGTGGTTCACCACGATCACGATTAATGCTACAAGCTAGGATCAGAACATATAATCGCCCTTGGCGGATTTTCATTTGCTTATACCCATGGGTACATTGTCACCTAATGTCGCAGCAAATGAAAGTGAGTAGATTTGTAGGCATGTGA",
"GATAGGTATAGGAGATGCCCCATAATTTACACTGGGTATGACAATGAGGAGCGTACCGGTGATACAGCAGGGAACTTCATCTACTCATCATTCGTGTGGGATCATTTTCCGAAAACTGACCATCGAACGTAGTGCCCAAAAAATGAGCCGCAATAT",
"ACGCTGTTTCGTTTGTTGGCCACCAACGCAGCCATCCCAAAGCGGGGAGAGAGTCGCCGAAAACCATATCCTTATTCAAATTTACGGGGACATTCTATGCCACTGAACCAAACTGAATGTCTGATTCGTTGGGTGCCGTGGAAATGTGATATCCTG",
"TAGGTTTCCAAGTAACGGCGCACTCAATTAAATTAGTCAGGTTTTGGAGACCCCTGATAGGGGCTGGCCTTTGGGTCAGCAGGTGGCAAGCCCAAGCCTAATTGCAAATCGTAAGGCGGTAGGGGTCATTCTGCGATCATGCCACTGCGCACCTGG",
"TCTCACAGGTAAGCGTAACTATATCAGCTATTCTCAAGAAGCTTGAACCAACCTTAGGTCCTAGGGCGTATTGGGCTCCCCCGAGCGAATTCGCTAAGGGTCCATTGTGCATTATCACCGCGCGGGTGAGATCTCTCAAAGGTGTGTCGCACGGCA",
"TGAAAGGTTTCCGTCGTGTTCCATAGGGGGCATTATTATTGGCAGAACAGCTGGGTGTGCATATGTGAATTCCCCTTGCTAGTGGCAGACTGGCGCACCATGTTAAGTACTAGATGGGCAAGAATAAGGAGTCTGTATGTTTTATTAGACCACGAT",
"ATATTCCGTGTTGGGGCTCATTCTAGGAAAGGTTGTTATCCGTGGGTGTACGTTAATCATATATGCCAGGAACCTAGAATATGACTCGTTGTCCAGTTCATAGACATTCCTTGGTTAATGCTGGGGCAGGGAGTATCCGACCTAGGTTGATCCCCT",
"CTTAAAAGTTACGATTCAAGTAATGTAGTCCAGGTGCTTACTTGGACCAGTTCTTAGACTTTACCCGGTTGTAGGGATCATTTTGAGTTATGTATAAGGTCCGAATGGTTACCTGTGCGATTGAACTACACGCCTCTGTGGATCTTGACGTCGGGG",
"TCTGTAAAGCAGTCTTTTAGGATTACAAGTAGGTTTATAGTTTCCACTACAGGATCACGAACAGGTAGCCGCAATGCTTGGCGAGAGCGCGACGCTGAAAGGAACTTAGAAAGTACTGGCAGGGCACATTATGTTAGCACTTGCCTTTGCTAACAG",
"CACAGTACTGAGACTCACCCGGATAATCCGAAAGATAGTACATCCATTTGGGCCCATTGTGGAATACTTATGGTCAGCTGCTTAACACGTGCTGTCTAACACGGATCGAATCAATACTTAGCTTGGGCTAGGCCCAAATGACACGCAGTCCACCCT",
"TAATAAACCATACGGAGGTTACAGGTGCGATAACACACCGTGCGGTAGTTCGAGAATACACATCATAGCGAGACAATGGGGCGTATTCCCCAGTTCCGGGTGCATTCTTTCGAAATACAGCTTGGACAGTATTATATCTCATCGCATGAGAGTGTA"
]
k = 12
t = 25
motifs = GreedyMotifSearch(Dna, k, t)
for motif in motifs:
    print(motif)